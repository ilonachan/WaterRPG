package jimdo.gladsoft.waterrpg.game.maps;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;

import jimdo.gladsoft.waterrpg.AskBoxProceedHandle;
import jimdo.gladsoft.waterrpg.R;
import jimdo.gladsoft.waterrpg.TextBoxProceedHandle;
import jimdo.gladsoft.waterrpg.game.Entity;
import jimdo.gladsoft.waterrpg.game.GameLogic;
import jimdo.gladsoft.waterrpg.game.RPGMap;

/**
 * Created by osboxes on 7/18/17.
 */

public class PirateIslandMap extends RPGMap{

    static boolean hasKey1, hasKey2, hasKey3, hasKey4, hasObj1, hasObj2, hasObj3, lockBrian = false;

    @Override
    protected void loadEntities() {
        this.entities.add(new Entity(23,21,2) {
            @Override
            protected Bitmap loadBitmap() {
                return ((BitmapDrawable)GameLogic.context.getResources().getDrawable(R.drawable.ent_oak)).getBitmap();
            }

            @Override
            public Bitmap getEntitySpriteAtRowAndCol(int row, int col) {
                return Bitmap.createBitmap(this.getBitmap(), 44*col, 44*row, 44, 44);
//                return Bitmap.createBitmap(this.getBitmap(), 22*col, 22*row, 22, 22);
            }


            @Override
            public void tick8persec(int tickNum) {
                super.tick8persec(tickNum);
                if(!lockBrian) this.setFaceDir(2);
            }

            @Override
            public void handlePlayerInteract() {
                lockBrian = true;

                switch(GameLogic.playerData.getFaceDir()){
                    case 0: this.setFaceDir(1); break;
                    case 1: this.setFaceDir(0); break;
                    case 2: this.setFaceDir(3); break;
                    case 3: this.setFaceDir(2); break;
                }

                if(!hasKey1) {
                    if(hasObj1) {
                        hasKey1 = true;
                        hasObj1 = false;
                        GameLogic.context.showTextBox("Brian", "You found my Coin!!! Thanks :D\nAnd as I promised, here is your key.",new TextBoxProceedHandle() {
                            @Override
                            public void handle() {
                                GameLogic.context.showTextBox("", "You obtained Key 1!",new TextBoxProceedHandle() {
                                    @Override
                                    public void handle() {
                                        lockBrian = false;
                                    }
                                });
                            }
                        });
                    } else {
                        GameLogic.context.showTextBox("Brian", "Hey "+GameLogic.playerData.playerName+"! Can I ask you a favor?\nI lost something very valuable,\ncould you help me find it? Thanks!",new TextBoxProceedHandle() {
                            @Override
                            public void handle() {
                                GameLogic.context.showTextBox("Brian", "In return, I can give you a key\nto that suspicious building down there.",new TextBoxProceedHandle() {
                                    @Override
                                    public void handle() {
                                        lockBrian = false;
                                    }
                                });
                            }
                        });
                    }
                } else {
                    GameLogic.context.showTextBox("Brian", "Good Luck in there!",new TextBoxProceedHandle() {
                        @Override
                        public void handle() {
                            lockBrian = false;
                        }
                    });
                }
            }
        });
    }

    @Override
    protected void addTileHandlers() {
        /*
        this.tileInteractions[7][4] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) { if(direction!=0) return false; GameLogic.context.showTextBox("",GameLogic.playerData.playerName+"'s home"); return true; }
        };
        this.tileInteractions[11][9] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) { if(direction!=0) return false; GameLogic.context.showTextBox("", "Pirate Bay!\nTreasured dreams lie here"); return true; }
        };
        this.tileInteractions[7][13] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) { if(direction!=0) return false; GameLogic.context.showTextBox("","Gary's home"); return true; }
        };
        */

        this.tileInteractions[9][15] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) { if(direction!=0) return false; if(hasKey2) return true; hasKey2 = true; GameLogic.context.showTextBox("","You found key 2!\nIt was below the mailbox,\nWELL HIDDEN!"); return true; }
        };

        this.tileInteractions[23][24] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) { if(hasObj1 || hasKey1) return true; hasObj1 = true; GameLogic.context.showTextBox("","You found the valuable coin!\nBring it back to Brian to get a key."); return true; }
        };

        this.tileTryStepEvent[9][12] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) {
                GameLogic.context.showTextBox("","The door seems to be locked....\n\n(What did you expect anyway?)"); return false;
            }
        };

        this.tileTryStepEvent[9][22] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) {
                GameLogic.context.showTextBox("","It is locked.\nA sign says: \"Do not disturb, verifying\nString Theory              -Dr. Cooper\""); return false;
            }
        };

        this.tileTryStepEvent[22][30] = new TileEventHandler(){
            @Override
            public boolean handle(int direction) {
                if(hasKey1 && hasKey2) GameLogic.warpPlayerToPosition(1,6,12); else GameLogic.context.showTextBox("","The door is locked! You need\ntwo keys to open it."); return false;
            }
        };

    }

    @Override
    protected void initTiles() {
        this.defaultTilePattern = new int[][] {{50}};
        this.graphTileDef = new int[][]
                {{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 3, 4, 0, 0, 3, 4, 1, 2, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 3, 4, 7, 8, 3, 4, 7, 8, 5, 6, 3, 4, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 7, 8, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 9, 10, 10, 10, 10, 10, 11, 12, 13, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0},
                {0, 0, 0, 0, 3, 4, 0, 0, 0, 16, 17, 17, 17, 17, 18, 19, 19, 19, 19, 19, 20, 21, 22, 22, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0},
                {0, 0, 0, 0, 7, 8, 0, 0, 9, 25, 26, 26, 26, 26, 27, 19, 28, 29, 19, 19, 19, 21, 22, 22, 23, 30, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0},
                {0, 0, 1, 2, 0, 0, 0, 31, 32, 33, 26, 26, 26, 26, 27, 34, 35, 36, 37, 38, 19, 39, 40, 41, 42, 43, 20, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0},
                {0, 0, 5, 6, 0, 0, 44, 45, 36, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 19, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0},
                {3, 4, 0, 0, 0, 9, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 73, 77, 78, 79, 80, 81, 19, 20, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4},
                {7, 8, 0, 0, 0, 82, 19, 83, 84, 85, 86, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 87, 19, 88, 89, 89, 90, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8},
                {0, 3, 4, 0, 0, 82, 19, 28, 91, 92, 86, 86, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 93, 94, 95, 96, 97, 98, 20, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0},
                {0, 7, 8, 0, 0, 82, 99, 35, 100, 101, 102, 76, 76, 76, 76, 76, 76, 76, 103, 104, 76, 76, 76, 105, 106, 107, 107, 108, 109, 89, 89, 90, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0},
                {0, 1, 2, 0, 0, 82, 110, 65, 66, 111, 112, 102, 113, 114, 114, 114, 115, 116, 117, 118, 119, 76, 76, 120, 121, 122, 123, 124, 96, 96, 97, 109, 89, 125, 126, 10, 11, 0, 0, 0, 0, 0, 0, 0, 1, 2},
                {0, 5, 6, 0, 0, 127, 128, 83, 84, 19, 88, 129, 95, 96, 96, 96, 130, 131, 53, 54, 55, 76, 76, 76, 86, 120, 122, 132, 123, 123, 109, 96, 96, 97, 98, 19, 20, 11, 0, 0, 0, 0, 0, 0, 5, 6},
                {3, 4, 0, 0, 0, 0, 127, 128, 19, 19, 133, 106, 107, 134, 123, 123, 135, 136, 74, 75, 76, 76, 76, 76, 76, 86, 105, 106, 134, 124, 96, 96, 97, 135, 109, 89, 137, 20, 11, 0, 0, 0, 0, 0, 3, 4},
                {7, 8, 0, 0, 0, 0, 0, 127, 138, 128, 139, 140, 141, 106, 107, 134, 135, 142, 143, 115, 144, 145, 146, 146, 144, 145, 120, 122, 132, 132, 123, 123, 135, 135, 123, 123, 98, 19, 63, 0, 0, 0, 0, 0, 7, 8},
                {3, 4, 0, 0, 0, 0, 0, 0, 0, 127, 138, 128, 139, 140, 141, 106, 108, 132, 135, 136, 76, 76, 76, 76, 76, 76, 76, 147, 148, 149, 149, 149, 149, 150, 123, 123, 98, 28, 151, 11, 0, 0, 0, 3, 4, 0},
                {7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 19, 139, 141, 123, 106, 108, 136, 76, 103, 104, 76, 76, 76, 76, 152, 153, 154, 154, 154, 154, 155, 156, 157, 158, 35, 36, 159, 0, 0, 0, 7, 8, 0},
                {0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 19, 133, 123, 123, 156, 160, 116, 117, 118, 119, 76, 76, 76, 161, 162, 154, 154, 154, 154, 155, 160, 87, 163, 164, 66, 165, 0, 0, 0, 0, 1, 2},
                {0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 139, 141, 123, 166, 102, 167, 53, 54, 55, 76, 76, 76, 168, 169, 169, 169, 169, 169, 170, 76, 171, 35, 172, 173, 63, 0, 0, 0, 0, 5, 6},
                {0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 139, 140, 174, 175, 176, 74, 75, 76, 76, 76, 76, 177, 178, 179, 180, 181, 182, 183, 76, 184, 65, 66, 111, 63, 0, 0, 0, 0, 3, 4},
                {0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 19, 99, 35, 100, 101, 102, 76, 76, 76, 76, 185, 186, 187, 188, 189, 190, 191, 192, 193, 83, 84, 19, 63, 0, 0, 0, 0, 7, 8},
                {0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 110, 65, 66, 111, 85, 86, 86, 76, 76, 76, 76, 76, 76, 76, 194, 195, 193, 19, 19, 19, 196, 197, 0, 0, 0, 3, 4, 0},
                {0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 19, 83, 84, 19, 112, 102, 198, 199, 76, 76, 76, 194, 195, 195, 193, 19, 19, 19, 19, 196, 197, 0, 0, 0, 0, 7, 8, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 19, 19, 19, 19, 200, 117, 118, 101, 201, 201, 202, 203, 204, 204, 204, 19, 19, 196, 197, 0, 0, 0, 0, 3, 4, 0, 0},
                {0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 138, 128, 19, 19, 110, 65, 66, 111, 19, 19, 19, 19, 19, 196, 138, 138, 138, 197, 0, 0, 0, 3, 4, 7, 8, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 138, 128, 19, 83, 84, 19, 19, 196, 138, 138, 138, 197, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 138, 138, 138, 138, 138, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 3, 4, 0, 0, 3, 4, 0, 0, 7, 8, 1, 2, 0, 0, 3, 4, 3, 4, 7, 8, 1, 2, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 7, 8, 3, 4, 0, 0, 5, 6, 3, 4, 7, 8, 7, 8, 0, 0, 5, 6, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 7, 8, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        this.tileBehaviorDef = new int[][]
                {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    }

    @Override
    protected String getMapName() {
        return "pirate_island";
    }

    @Override
    public String serializeFlags() {
        return (hasKey1?"1":"0")+(hasKey2?"1":"0")+(hasKey3?"1":"0")+(hasKey4?"1":"0")+(hasObj1?"1":"0")+(hasObj2?"1":"0")+(hasObj3?"1":"0");
    }

    @Override
    public void deserializeFlags(String text) {
        if(text == null) text = "01";
        hasKey1 = (text.charAt(0) == '1');
        hasKey2 = (text.charAt(1) == '1');
        hasKey3 = (text.charAt(2) == '1');
        hasKey4 = (text.charAt(3) == '1');
        hasObj1 = (text.charAt(4) == '1');
        hasObj2 = (text.charAt(5) == '1');
        hasObj3 = (text.charAt(6) == '1');
    }
}
